<?php
define('DRUPAL_STH_USER', 4);
define('DRUPAL_STH_CLUB_USER', 5);
// @file

/**
 * Implements hook_permission().
 */
function custom_ticketmaster_permission() {
  return array(
    'administer ticketmaster import' => array(
      'title' => 'Administer Ticketmaster Data Import',
    ),
    'STH User' => array(
      'title' => 'Ticketmaster STH User',
    ),
    'Editor' => array(
      'title' => 'Site Editor',
    ),
  );
}

/**
 * Implements hook_menu()..
 */

function custom_ticketmaster_menu() {
  $items = array();
  $items['admin/ticketmaster'] = array(
    'title' => 'Ticketmaster',
    'description' => 'Ticketmaster Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_ticketmaster_import_customer'), 
    'access arguments' => array('administer ticketmaster import'),
    'file' => 'custom_ticketmaster.import.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/ticketmaster/import'] = array(
    'title' => 'Customer Data Import',
    'description' => 'Ticketmaster Customer Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_ticketmaster_import_customer'),
    'access arguments' => array('administer ticketmaster import'),
    'file' => 'custom_ticketmaster.import.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  /*$items['admin/ticketmaster/clean-data'] = array(
    'title' => 'Clean User Data',
    'description' => 'Clean User data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_ticketmaster_clean_data'),
    'access arguments' => array('administer ticketmaster import'),
    'file' => 'custom_ticketmaster.import.inc',
    'type' => MENU_LOCAL_TASK,
  );*/
  return $items;
}

/**
 * Implements hook_cron().
 *
 * hook_cron() is the traditional (pre-Drupal 7) hook for doing "background"
 * processing. It gets called every time the Drupal cron runs and must decide
 */
function custom_ticketmaster_cron() {
  /*
  // Default to an daily interval. Of course, cron has to be running at least
  // daily for this to work.
  $interval = variable_get('ticketmaster_cron_interval', 24*60*60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (variable_get('ticketmaster_run_cron', 1) == 1) {
    if (time() >= variable_get('ticketmaster_cron_next_execution', 0)) {
      // This is a silly example of a cron job.
      // It just makes it obvious that the job has run without
      // making any changes to your database.
      //module_load_include('inc', 'custom_ticketmaster', 'custom_ticketmaster.import');
      //custom_ticketmaster_events_feed_cron_import();
      variable_set('ticketmaster_cron_next_execution', time() + $interval);
      watchdog('cutom_tickemaster', 'cutom_tickemaster game feed import cron ran');
    }
  }*/
}

function parseFeedXml(){
  $xml = new XMLReader();
  $url = 'http://data.nba.com/data/5s/xml/mobile_teams/2013/teams/magic_scores.xml';
  $feed_url = variable_get('game_feed_url', $url);
  if (fopen($feed_url, 'r')) {
    $feed = file_get_contents($feed_url);
  }	
  $xml->XML($feed);
  $assoc = xml2assoc($xml);	
  $xml->close();	
  $node_arr = array();
  $c = 0;
  $g = 0;	
  foreach($assoc[0]['value'] as $gs) {
    $c = 0;
    $node_arr[$g]['attributes']['i'] = $gs['attributes']['i'];
    $node_arr[$g]['attributes']['d'] = $gs['attributes']['d'];
    $node_arr[$g]['attributes']['tm'] = $gs['attributes']['tm'];
    $node_arr[$g]['attributes']['vtm'] = $gs['attributes']['vtm'];
    $node_arr[$g]['attributes']['htm'] = $gs['attributes']['htm'];
    $node_arr[$g]['attributes']['vrad'] = $gs['attributes']['vrad'];
    $node_arr[$g]['attributes']['hrad'] = $gs['attributes']['hrad'];
    $node_arr[$g]['attributes']['p'] = $gs['attributes']['p'];
    $node_arr[$g]['attributes']['st'] = $gs['attributes']['st'];
    $node_arr[$g]['attributes']['cl'] = $gs['attributes']['cl'];
    $node_arr[$g]['attributes']['r'] = $gs['attributes']['r'];
    $node_arr[$g]['attributes']['ser'] = $gs['attributes']['ser'];
    $node_arr[$g]['attributes']['is'] = $gs['attributes']['is'];
    foreach($gs['value'] as $gsv) {			
      switch ($gsv['tag']){
        case 'v':				
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['visiting'] = '1';
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['home'] = '0';
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['t'] = $gsv['attributes']['t'];
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['re'] = $gsv['attributes']['re'];
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['s'] = $gsv['attributes']['s'];
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['see'] = $gsv['attributes']['see'];
          $c++;
          break;
        case 'h':
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['home'] = '1';
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['visiting'] = '0';
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['t'] = $gsv['attributes']['t'];
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['re'] = $gsv['attributes']['re'];
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['s'] = $gsv['attributes']['s'];
          $node_arr[$g]['child_elem'][$c][$gsv['tag']]['see'] = $gsv['attributes']['see'];
          $c++;
          break;
        }			
      }
    $g++;		
  }
  $cnt = 0;
  foreach ($node_arr as $val) {
    $data[$cnt]['gamecode'] = 'GM' . substr($val['attributes']['d'], 2);
    $data[$cnt]['stadium'] = '';
    $data[$cnt]['visiting-team'] = $val['child_elem'][0]['v']['t'];
    $data[$cnt]['visiting-team-score'] = $val['child_elem'][0]['v']['s'];
    $data[$cnt]['home-team'] = $val['child_elem'][1]['h']['t'];
    $data[$cnt]['home-team-score'] = $val['child_elem'][1]['h']['s'];
    $data[$cnt]['date'] = formatdate($val['attributes']['d']);
    $data[$cnt]['time'] = str_replace(' ET', '', $val['attributes']['tm']);
    $cnt++;
  }
  return $data;
}

/**
 * function for XML Parsing
 */
function xml2assoc($xml) {
  $tree = null;
  while($xml->read())
    switch ($xml->nodeType) {
      case XMLReader::END_ELEMENT: return $tree;
      case XMLReader::ELEMENT:
          $node = array('tag' => $xml->name, 'value' => $xml->isEmptyElement ? '' : xml2assoc($xml));
          if($xml->hasAttributes)
              while($xml->moveToNextAttribute())
                $node['attributes'][$xml->name] = $xml->value;
          $tree[] = $node;
      break;
      case XMLReader::TEXT:
      case XMLReader::CDATA:
      $tree .= $xml->value;
    }
    return $tree;
}

function formatdate($d){
  if(isset($d) && !empty($d)){
    $y = substr($d, 0, 4);
    $m = substr($d, 4, 2);
    $d = substr($d, 6, 2);
  }
  return $y . "-" . $m . "-" . $d;
}