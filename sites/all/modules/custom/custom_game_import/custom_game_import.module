<?php
//@file module
/**
 * Module customized by debraj.naik@io-media.com and team
 * Purpose: This is a universal module which must have a child module like NBA module
 *  "custom_nba_feed_import" module
 * for details please take a look readme.txt of this module.
 */

/**
 * Implements hook_menu()..
 */
function custom_game_import_menu() {
  $items = array();
  //All the settings menu can be found in each inner module  
  $items['admin/manage/settings/nba_feed/cron_mail_settings'] = array(
    'title' => 'STP Game Feed Cron Setting',
    'description' => 'Cron Alerts Mail Setting Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_game_cron_mail_settings'),
    'access arguments' => array('administer rss game feed import'),
    'file' => 'custom_game_mail_settings.import.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 21
  );  
  return $items;
}

/**
 * Implements hook_permission().
 */
function custom_game_import_permission() {
  return array(
    'administer game feed import' => array(
      'title' => 'Administer Ticketmaster Data Import',
    )
  );
}

/**
 * custom function to create/update game node
 * @params, $record: game information
 * known issue: when we found any post season game, the time is not updated due to some time issue,
 *  so, we need to update the same manually
 */
function custom_game_import_create_game_event($record) {
  $count = $node_count = 0;
  $update = '';
  
  $game = db_select('field_data_field_game_code', 't')
  ->fields('t', array('entity_id'))
  ->condition('t.field_game_code_value', $record['gamecode'], '=')
  ->range(0, 1)->execute()->fetchField();
    
  if (isset($game) && $game) { 
    $new_node = node_load($game);
    $lang = $new_node->language;    
    $update = TRUE;    
  }
  else if ($record['team-id']){ 
    global $user;
    $lang = LANGUAGE_NONE;
    $new_node = new stdClass();
    $new_node->uid = $user->uid;
    $new_node->status = 1;
    $new_node->language = $lang;
    $new_node->type = 'games';
    $new_node->field_game_code[$lang][0]['value'] = $record['gamecode'];
    $new_node->field_opponent_team[$lang][0]['nid'] = $record['team-id'];      

    $new_node->field_ground[$lang][0]['value'] = $record['stadium'];
    $new_node->field_game_type[$lang][0]['value'] = $record['game_type'];
    $new_node->field_home_game_event[$lang][0]['value'] = $record['home_game_event'];
          
    $new_node->title = $record['title'];
    if (!empty($record['time'])){        
      $new_node->field_game_countdown[$lang][0]['countdown_timer'] = $record['time'];
    }
    $node_count++;
  }
  
  if ($new_node){
    if (!empty($record['time'])){
      $new_node->field_event_date[$lang][0]['value'] = $record['time'];
    }
    $new_node->field_team_score[$lang][0]['value'] = $record['team_score'];
    $new_node->field_other_team_score[$lang][0]['value'] = $record['other_team_score'];
    node_save($new_node);
    
    if ($update){
     watchdog('custom_game_import', 'Game event update with NID: %nid', array('%nid' => $new_node->nid), WATCHDOG_INFO);
    }
    else {
      watchdog('custom_rss_game_feed_import', 'Game event created with NID: %nid', array('%nid' => $new_node->nid), WATCHDOG_INFO);
    }
  } 
}

/**
 * Global function for all related module
 * Purpose: get home team abbreviation
 * This is very important to get home team of a site. 
 */
function custom_game_import_get_hometeam_abbreviation($entity_id){
 $home_team_abbreviation = db_query("SELECT field_team_abbreviation_value FROM {field_data_field_team_abbreviation} WHERE entity_id = $entity_id")->fetchField();
 return $home_team_abbreviation;
}

/**
 * Global function for all related module
 * Purpose: get team nid by their abbreviation
 * @param: $abbr, is the alpha key get from feed.
 */
function custom_game_import_get_hometeam_get_team_id($abbr = NULL){
  if (!empty($abbr)){
    $query = db_select('field_data_field_team_abbreviation', 'f'); 
    $result = $query->fields('f', array('entity_id'))    
      ->condition('f.field_team_abbreviation_value', $abbr, '=')
      ->execute()
      ->fetchField();
    if ($result){
      return $result;
    }
    else{
      return false;
    } 
  }  
}

/**
 * hook_mail().
 **/
function custom_game_import_alert_mail($key, &$message, $params) {        	
  switch($key) {
    case 'start':                
     $cron_subject = variable_get('cron_start_subject', '');
     $message['subject'] = $cron_subject;
     $cron_start_body = variable_get('cron_start_body', '');
     $message['body'][] = "
     <p>
     ".$cron_start_body['value']."
     </p>
     <br>
     Started Time: ".format_date(time())."";
    break;
    case 'success':                
      $cron_subject = variable_get('cron_success_subject', '');
      $message['subject'] = $cron_subject;        
      $cron_success_body = variable_get('cron_success_body', '');
      $message['body'][] = "
      <p>
      ".$cron_success_body['value']."
      </p>
      <br>
      Finished Time: ".format_date(time())."";
    break;
  }
}

/**
 * 
 * Convert time from ET to Site's default time zone.
 */
function stp_game_get_converted_time($date_val = NULL){
  $curr_timezone = variable_get('date_default_timezone', 'America/New_York');
  $feed_timzone = 'America/New_York';
  if (isset($date_val) && !empty($date_val)){
   $dte = new DateTime($date_val, new DateTimeZone($feed_timzone));
   $dte->setTimeZone(new DateTimeZone($curr_timezone));
   return $dte->format('Y-m-d H:i:s');
  }
}