<?php
/*define('DRUPAL_STH_USER', 4);
define('DRUPAL_STH_CLUB_USER', 5);*/

/**
 * Implements hook_menu().
 */
function custom_admin_init() {
  drupal_add_js(drupal_get_path('module', 'custom_admin') . '/js/gallery.js');
}

/**
 * Implements hook_menu().
 */
function custom_admin_menu() {
  $items = array();
  $items['admin/manage'] = array(
      'title' => 'Admin Management System',
      'description' => 'list, edit, add, manage content etc.',
      'position' => 'right',
      'weight' => 200,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer site content'),
      'file' => 'custom_admin.admin.inc',
  );

  $items['admin/manage/settings'] = array(
      'title' => 'STP | General settings',
      'description' => 'STP General settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('custom_admin_general_settings'),
      'access arguments' => array('administer site settings'),
      'file' => 'custom_admin.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/manage/settings/general'] = array(
      'title' => 'Site General settings',
      'description' => 'Site general settings.',
      'access arguments' => array('administer site settings'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/manage/settings/invoice'] = array(
    'title' => 'Invoice',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_invoice_setting'),
    'access arguments' => array('administer site settings'),
    'file' => 'custom_admin.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/manage/settings/invoice/email'] = array(
    'title' => 'Email',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/manage/settings/invoice/payment'] = array(
    'title' => 'Payment',
    'description' => 'Invoice Payment settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_invoice_payment_setting'),
    'access arguments' => array('administer site settings'),
    'file' => 'custom_admin.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/manage/settings/invoice/data'] = array(
    'title' => 'Invoice Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_sth_data_settings'),
    'access arguments' => array('administer site settings'),
    'file' => 'custom_admin.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/people/tm-signup'] = array(
    'title' => 'Ticketmaster Single Sign on Settings',
    'description' => t('Configure single sign on using ticketmaster apis.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_tm_signon_settings'),
    'access arguments' => array('administer MSG settings'),
    'file' => 'custom_admin.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/manage/settings/rsvp'] = array(
    'title' => 'RSVP',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_rsvp_settings'),
    'access arguments' => array('administer site settings'),
    'file' => 'custom_admin.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
   $items['admin/manage/settings/birthday'] = array(
    'title' => 'Birthday Takeover',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_birthday_takeover'),
    'access arguments' => array('administer site settings'),
    'file' => 'custom_admin.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/manage/settings/pages'] = array(
    'title' => 'Manage Pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_add_page_settings'),
    'access arguments' => array('administer site content'),
    'file' => 'custom_admin.pages.inc',
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/manage/pages/add/%'] = array(
    'title' => 'Add New Page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_admin_add_page', 4),
    'access arguments' => array('administer site content'),
    'file' => 'custom_admin.pages.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/manage/settings/analytics'] = array(
    'title' => 'Google Analytics Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_ga_form_setting'),
    'access arguments' => array('administer site settings'),
    'file' => 'custom_admin.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function custom_admin_permission() {
  return array(
      'administer site content' => array(
          'title' => t('Administer Site Content'),
          'description' => t('Perform administration tasks for site content.'),
      ),
      'administer site settings' => array(
          'title' => t('Administer site settings'),
          'description' => t('Perform administration tasks for Site custom settings.'),
      ),
       'administer ticketmaster import' => array(
      'title' => 'Administer Ticketmaster Data Import',
      ),
      'STH User' => array(
      'title' => 'Ticketmaster STH User',
      ),
      'Editor' => array(
      'title' => 'Site Editor',
      ), 
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_admin_form_promo_tile_node_form_alter(&$form, &$form_state, $form_id) {
  if(arg(1) == 'add') {
    drupal_set_title(t('New Promo Tile'));
  }
  else {
    $form['field_link']['und'][0]['#title'] = t('Link');
  }
  $form['actions']['submit']['#validate'][] = 'custom_admin_promo_tile_validate';
}
function custom_admin_form_team_node_form_alter(&$form, &$form_state, $form_id) {
  if(arg(1) == 'add') {
    drupal_set_title(t('Create New Team'));
  }
}
function custom_admin_form_acct_rep_node_form_alter(&$form, &$form_state, $form_id) {
  if(arg(1) == 'add') {
    drupal_set_title(t('New Account Rep'));
  }
}
function custom_admin_form_other_event_node_form_alter(&$form, &$form_state, $form_id) {
  if(arg(1) == 'add') {
    drupal_set_title(t('New 3rd Party Event'));
  }
}
function custom_admin_form_games_node_form_alter(&$form, &$form_state, $form_id) {
  if(arg(1) == 'add') {
    drupal_set_title(t('New Game Event'));
  }
}

function custom_admin_form_views_form_manage_tab_pages_page_alter(&$form, &$form_state, $form_id) {
   $form['#submit'][] = 'custom_admin_views_weight_form_submit';
}

function custom_admin_form_event_node_form_alter(&$form, &$form_state, $form_id) {
  if(arg(1) == 'add') {
    drupal_set_title(t('New STP Member Event'));
  }
  $form['field_images']['und']['#file_upload_title'] = 'Add new image file';
}

function custom_admin_views_weight_form_submit(&$form, &$form_state) {
  drupal_get_messages($type = NULL, $clear_queue = TRUE);
  drupal_set_message(t('Tab\'s ordering successfully changed.'));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function custom_admin_form_user_login_alter(&$form, &$form_state, $form_id) {
  $key = array_search('user_login_final_validate', $form['#validate']);
  if ($key) {
    $form['#validate'][$key] = 'custom_admin_login_final_validate';
  }
  if (variable_get('tm_single_sign_on', 0)) {
    $key = array_search('user_login_authenticate_validate', $form['#validate']);
    if ($key) {
      $form['#validate'][$key] = 'custom_admin_login_authenticate_validate';
    }
  }
  //array_unshift($form['#validate'], 'custom_admin_user_login_validate');
}

/**
 * The final validation handler on the login form.
 *
 * Sets a form error if user has not been authenticated, or if too many
 * logins have been attempted. This validation function should always
 * be the last one.
 */
function custom_admin_login_final_validate($form, &$form_state) {
  if (empty($form_state['uid'])) {
    // Always register an IP-based failed login event.
    flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
    // Register a per-user failed login event.
    if (isset($form_state['flood_control_user_identifier'])) {
      flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
    }

    if (isset($form_state['flood_control_triggered'])) {
      if ($form_state['flood_control_triggered'] == 'user') {
        form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('https://oss.ticketmaster.com/aps/magic/EN/link/account/login'))));
      } else {
        // We did not find a uid, so the limit is IP-based.
        form_set_error('name', t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('https://oss.ticketmaster.com/aps/magic/EN/link/account/login'))));
      }
    } else {
      form_set_error('name', t('Sorry, unrecognized Account ID or password. <a class="forgot-pass" data-title="Forgot Password" href="@password">Have you forgotten your password?</a>', array('@password' => '/trouble-signing')));
      watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
    }
  } elseif (isset($form_state['flood_control_user_identifier'])) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
  }
}

/**
 * Implements hook_theme()
 */
function custom_admin_theme($existing, $type, $theme, $path) {
  return array(
      'email_offer_template' => array(
          'variables' => array(),
          'template' => 'templates/email-offer-message'
      ),
      'calendar_offer_popup_template' => array(
          'variables' => array(),
          'template' => 'templates/calendar-offer-popup-message'
      ),
      'playoff_banner_box_template' => array(
          'variables' => array(),
          'template' => 'templates/playoff-banner-box-template'
      ),
      'playoff_content_box_template' => array(
          'variables' => array(),
          'template' => 'templates/playoff-content-box-template'
      ),
      'renew_banner_box_template' => array(
          'variables' => array(),
          'template' => 'templates/renew-banner-box-template'
      ),
      'renew_content_box_template' => array(
          'variables' => array(),
          'template' => 'templates/renew-content-box-template'
      ),
  );
}

/**
 * Implements hook_token_info().
 */
function custom_admin_token_info() {
  $types['rsvp_event'] = array(
      'name' => t('RSVP Event'),
      'description' => t('Tokens related to RSVP Event.'),
      'needs-data' => 'user_info',
  );
  $types['ticket_renew'] = array(
      'name' => t('Ticket Renew'),
      'description' => t('Tokens related to Ticket Renew.'),
      'needs-data' => 'ticket_renew',
  );
  $types['ticket_playoff'] = array(
      'name' => t('Ticket Playoff'),
      'description' => t('Tokens related to Ticket Playoff.'),
      'needs-data' => 'ticket_playoff',
  );
  $types['offer_tickets'] = array(
      'name' => t('Offer Tickets'),
      'description' => t('Tokens related to Offer Tickets.'),
      'needs-data' => 'offer_tickets',
  );
  $user_info['user_name'] = array(
      'name' => t('STH Name'),
      'description' => t("Name."),
  );
  $user_info['event_name'] = array(
      'name' => t('Event Name'),
      'description' => t("Event Name."),
  );
  $user_info['email'] = array(
      'name' => t('Email'),
      'description' => t("Email."),
  );

  $user_info['seatinfo'] = array(
      'name' => t('Title'),
      'description' => t("Title."),
  );
  $user_info['people_attending'] = array(
      'name' => t('No. of People Attending'),
      'description' => t("Attending People."),
  );

  $ticket_renew['ticket-renew-days-left'] = array(
      'name' => t('Ticket renew days left'),
      'description' => t("Season Ticket renew days left."),
  );
  $ticket_renew['ticket-renew-days-only'] = array(
      'name' => t('Ticket renew days left'),
      'description' => t("Season Ticket renew days only(number)."),
  );
  $ticket_renew['ticket-renew-link'] = array(
      'name' => t('Ticket renew link'),
      'description' => t("Season Ticket renew link"),
  );

  $ticket_playoff['playoff-link'] = array(
      'name' => t('Playoff Link'),
      'description' => t("Playoff Link."),
  );
  $ticket_playoff['playoff-date'] = array(
      'name' => t('Playoff Date'),
      'description' => t("Playoff Date."),
  );
  // Tokens for Email Promotin of Tickets
  $offer_tickets['tickets'] = array(
      'name' => t('Promotion Ticktets'),
      'description' => t("Promotion Ticktets."),
  );
  $offer_tickets['game-date'] = array(
      'name' => t('Game Date'),
      'description' => t("Game Date."),
  );
  $offer_tickets['game'] = array(
      'name' => t('Game Event'),
      'description' => t("Game Event."),
  );
  $offer_tickets['offer-link'] = array(
      'name' => t('Promotion Ticktets Offer Link'),
      'description' => t("Promotion Ticktets Offer Link."),
  );
  $offer_tickets['seat-holder-name'] = array(
      'name' => t('Seat Holder Name'),
      'description' => t("Seat Holder Name."),
  );
  return array(
      'types' => $types,
      'tokens' => array('rsvp_event' => $user_info, 'ticket_renew' => $ticket_renew, 'ticket_playoff' => $ticket_playoff, 'offer_tickets' => $offer_tickets),
  );
}

/**
 * Implements hook_tokens().
 */
function custom_admin_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'rsvp_event' && !empty($data['rsvp_event'])) {
    $user_info = $data['rsvp_event'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'user_name':
          // In the case of hook user_presave uid is not set yet.
          $replacements[$original] = $user_info['user_name'];
          break;
        case 'event_name':
          // In the case of hook user_presave uid is not set yet.
          $replacements[$original] = $user_info['event_name'];
          break;

        case 'email':
          $replacements[$original] = $user_info['email'];
          break;

        case 'seatinfo':
          $replacements[$original] = $user_info['seatinfo'];
          break;

        case 'people_attending':
          $replacements[$original] = $user_info['people_attending'];
          break;
      }
    }
  }
  if ($type == 'offer_tickets' && !empty($data['offer_tickets'])) {
    $promotion = $data['offer_tickets'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'tickets':
          // In the case of hook user_presave uid is not set yet.
          $replacements[$original] = $promotion['tickets'];
          break;
        case 'game-date':
          // In the case of hook user_presave uid is not set yet.
          $replacements[$original] = $promotion['game-date'];
          break;

        case 'game':
          $replacements[$original] = $promotion['game'];
          break;

        case 'offer-link':
          $replacements[$original] = $promotion['offer-link'];
          break;

        case 'seat-holder-name':
          $replacements[$original] = $promotion['seat-holder-name'];
          break;
      }
    }
  }
  if ($type == 'ticket_renew') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'ticket-renew-days-left':
          $replacements[$original] = format_plural(custom_admin_ticket_renew_remain_days(), '1 day', '@count days');
          break;
        case 'ticket-renew-days-only':
          $replacements[$original] = custom_admin_ticket_renew_remain_days();
          break;

        case 'ticket-renew-link':
          // In the case of hook user_presave uid is not set yet.
          $link = variable_get('ticket_renew_link', 'https://oss.ticketmaster.com/aps/magic/EN/link/account/login');
          $replacements[$original] = l('<span>' . t('Renew Now') . '</span>', $link, array('attributes' => array('class' => array('ticket-renew-link'), 'target' => '_blank'), 'html' => TRUE));
          break;
      }
    }
  }

  if ($type == 'ticket_playoff') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Basic user account information.
        case 'playoff-link':
          $replacements[$original] = l('<span>' . t('Purchase') . '</span>', variable_get('playoff_link', 'https://oss.ticketmaster.com/aps/magic/EN/link/account/login'), array('attributes' => array('class' => array('banner-playoff-btn'), 'target' => '_blank'), 'html' => TRUE));
          break;
        case 'playoff-date':
          $date = variable_get('playoff_date', '');
          $play_days = strtotime($date['year'] . '-' . $date['month'] . '-' . $date['day'] . ' 23:59:59');
          $play_days = date("F d", $play_days);
          $replacements[$original] = $play_days;
          break;
      }
    }
  }

  return $replacements;
}
function custom_admin_days_left($end_date) {
  $seconds_diff = $end_date - time();
  $days = ceil($seconds_diff / 3600 / 24);
  if ($days <= 0) {
    $days = 0;
  }
  $days = (strlen($days) == 1)? '0' . $days : $days;
  return $days;
}

/**
 * function to validate user login process and allow users to login using email address.
 */
function custom_admin_user_login_validate($form, &$form_state) {
  if (isset($form_state['values']['name']) && $form_state['values']['name']) {
    if ($name = db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER(:name)", array(
        ':name' => $form_state['values']['name'],
      ))->fetchField()) {
      form_set_value($form['name'], $name, $form_state);
    }
  }
}

/**
 * A validate handler on the login form. Check supplied username/password
 * against local users table. If successful, $form_state['uid']
 * is set to the matching user ID.
 */
function custom_admin_login_authenticate_validate($form, &$form_state) {
  module_load_include('inc', 'tm_api', 'tm_api.helper');
  $uid = 0;
  $password = trim($form_state['values']['pass']);
  $acct_id = trim($form_state['values']['name']);
  if (!empty($form_state['values']['name']) && !empty($password)) {
    // validate user by name, status and is_tickectmaster_user.
      $response = array();
       $response['response_ok'] = 0;
      $data = _tmapi_customer_query($acct_id, $password, 0);
      
      // $cmd = variable_get('tm_cmd', 'customer_query');
      // customer query
      //$param = tm_api_get_command_param($cmd, $acct_id);
      //$param['command1']['pin'] = $password;
     // $json = drupal_json_encode($param);
//      $response = tm_api_call($json, 'ticketing_services.aspx');
//      $data = drupal_json_decode($response['response']);
      
      if (!isset($data['error_detail']) && isset($data['result']) && $data['result'] == 0) {
          $response['response_ok'] = 1;
        if (isset($data['customer']['acct_id']) && $data['customer']['acct_id'] && $acct_id != $data['customer']['acct_id']) {
          $acct_id = $data['customer']['acct_id'];
        }
      }
      $check_acct_id = (int) $acct_id;
    // We will look for integer account ID
    if ($check_acct_id) {
      cache_clear_all('seat_hold-' . $acct_id, 'cache_custom', $wildcard = FALSE);
      cache_clear_all('seat_on_account-' . $acct_id, 'cache_custom', $wildcard = FALSE);
      cache_clear_all('invoice_list-' . $acct_id, 'cache_custom', $wildcard = FALSE);
      cache_clear_all('tmapi_seats_hold_reserved-' . $acct_id, 'cache_custom', $wildcard = FALSE);
      cache_clear_all('rep_mail-' . $acct_id, 'cache_custom', $wildcard = FALSE);
      //$sth_status = 0;
      $sth_status = _tmapi_get_sth_status($acct_id);
      if (isset($sth_status[0]['sth_status']) && $sth_status[0]['sth_status'] == 0):
        //check for authenticate validate with response.
        if ($response['response_ok']) {
          foreach ($sth_status as $key => $plans) {
            $_SESSION['plan_name11'][] = $plans['plan_name'];
          }
          if (!isset($data['error_detail']) && isset($data['result']) && $data['result'] == 0) {
            $account = tmapi_data_account_update($acct_id, $data['customer']);
            $form_state['uid'] = $uid = $account->uid;
            $fail = 0;
            $_SESSION['tmupa'] = base64_encode($password);
            if (isset($data['customer']['cust_name_id']) && $data['customer']['cust_name_id']) {
              $_SESSION['cust_name_id'] = $data['customer']['cust_name_id'];
            }
            if (!empty($data['customer'])) {
              if (isset($data['other_info_1']) && $data['other_info_1']) {
                $_SESSION['cust_info']['other_info_1'] = $data['other_info_1'];
              }
              if (isset($data['other_info_2']) && $data['other_info_2']) {
                $_SESSION['cust_info']['other_info_2'] = $data['other_info_2'];
              }
              if (isset($data['other_info_3']) && $data['other_info_3']) {
                $_SESSION['cust_info']['other_info_3'] = $data['other_info_3'];
              }
              if (isset($data['other_info_4']) && $data['other_info_4']) {
                $_SESSION['cust_info']['other_info_4'] = $data['other_info_4'];
              }
              if (isset($data['other_info_5']) && $data['other_info_5']) {
                $_SESSION['cust_info']['other_info_5'] = $data['other_info_5'];
              }
              if (isset($data['other_info_6']) && $data['other_info_6']) {
                $_SESSION['cust_info']['other_info_6'] = $data['other_info_6'];
              }
              if (isset($data['other_info_7']) && $data['other_info_7']) {
                $_SESSION['cust_info']['other_info_7'] = $data['other_info_7'];
              }
              if (isset($data['other_info_8']) && $data['other_info_8']) {
                $_SESSION['cust_info']['other_info_8'] = $data['other_info_8'];
              }
              if (isset($data['other_info_9']) && $data['other_info_9']) {
                $_SESSION['cust_info']['other_info_9'] = $data['other_info_9'];
              }
              if (isset($data['other_info_10']) && $data['other_info_10']) {
                $_SESSION['cust_info']['other_info_10'] = $data['other_info_10'];
              }
              if (isset($data['lock_account']) && $data['lock_account']) {
                $_SESSION['cust_info']['lock_account'] = $data['lock_account'];
              }
              $_SESSION['cust_info']['customer'] = $data['customer'];
            }
            
            watchdog('TicketMaster', 'Successfully authenticated for %name.', array('%name' => $acct_id));
            // Invoice List call
            
            $acct_rep = _tmapi_get_acct_rep($acct_id);
            
            if ($acct_rep) {
              watchdog('TicketMaster', 'get_acct_rep API Call Success for %name.', array('%name' => $acct_id));
            }
//            $invoice = tmapi_get_sth_invoice($acct_id);
//            $get_seats_hold = _tmapi_get_seats_on_account($acct_id);
            if(variable_get('en_tm_invoice', 0)){
              $invoice = tmapi_get_sth_invoice($acct_id);
            }
            // Get Tm seats on account
            if(variable_get('en_tm_get_seats_on_account', 0)){
              $get_seats_hold = _tmapi_get_seats_on_account($acct_id);
            }
            // Get TM seats on account reserved
            if(variable_get('en_tm_get_seats_on_account_reserved', 0)){
              $get_seats_hold_reserved = _get_seats_on_account_reserved($acct_id);
            }
           
            if ($get_seats_hold) {
              watchdog('TicketMaster', 'get_seats_on_account API Call Success for %name.', array('%name' => $acct_id));
            }
           // $invoice = tmapi_get_sth_invoice($acct_id);
           // $seats = _tmapi_get_seats_on_account($acct_id);
          }
          else {
            watchdog('TicketMaster', 'Login attempt failed for %user.', array('%user' => $acct_id));
            //return;
          }
        }
        else {
          watchdog('TicketMaster', 'Login attempt failed for %user.', array('%user' => $acct_id));
          //return;
        }
        endif;
    }
    if (!$uid) {
      user_login_authenticate_validate($form, $form_state);
    }
  }
}


function custom_admin_update_acct_rep($name, $acct_id) {
  if ($name) {
    $nid = db_query("SELECT rep.field_acct_rep_num_value FROM {node} n INNER JOIN {field_data_field_acct_rep_num} rep ON n.nid = rep.entity_id WHERE title = :name", array(':name' => $name))->fetchField();
    if (isset($nid) && $nid) {
       db_merge('tbl_user_acct_rep')
        ->key(array('acct_id' => $acct_id))
        ->fields(array(
          'acct_rep_num ' => $nid
        ))
      ->execute();
      cache_clear_all('rep_mail-' . $acct_id, 'cache_custom', $wildcard = FALSE);
    }
  }
}

function custom_admin_promo_tile_validate($form, &$form_state) {
  $data = $form_state['values'];
  if ($data['field_type']['und'][0]['value'] == 'countdown') {
    if (isset($data['field_date']['und'][0]['value']) && strtotime($data['field_date']['und'][0]['value']) < time()) {
      form_set_error('field_date', 'Countdown Date must be greater than current date');
    }
    elseif (!isset($data['field_date']['und'][0]['value'])) {
      form_set_error('field_date', 'A valid date is required for Countdown Date.');
    }
  }
}


function custom_hooks_fetch_game_events() {
 $current_time = time();
 $options = array();
 $data = db_query("SELECT node.title AS name, node.nid AS nid, event.field_event_date_value
      FROM  {node} node
      LEFT JOIN {field_data_field_event_date} event ON node.nid = event.entity_id AND (event.entity_type = 'node' AND event.bundle = 'games')
      INNER JOIN {field_data_field_game_type} gtype ON node.nid = gtype.entity_id AND (gtype.entity_type = 'node' AND gtype.field_game_type_value = '1')
      WHERE ((( (node.status = '1') AND (node.type IN  ('games')) ))) AND event.field_event_date_value > :time
      ORDER BY field_event_date_value ASC", array(':time' => $current_time));
  foreach ($data as $key => $game) {
    $options[$game->name . ' (' . date('m/d/Y', $game->field_event_date_value) . ')'] = $game->name . ' (' . date('m/d/Y', $game->field_event_date_value) . ')';
  }
  return $options;
}

/**
 * Implements hook_user_logout
 * @param $account integer Account ID of the user
 */
function custom_admin_user_logout($account) {
  $acct_id = $account->name;
  cache_clear_all('user_info-' . $acct_id, 'cache_custom', $wildcard = FALSE);
  cache_clear_all('seat_hold-' . $acct_id, 'cache_custom', $wildcard = FALSE);
  cache_clear_all('invoice_list-' . $acct_id, 'cache_custom', $wildcard = FALSE);
  cache_clear_all('seat_on_account-' . $acct_id, 'cache_custom', $wildcard = FALSE);
  cache_clear_all('tmapi_seats_hold_reserved-' . $acct_id, 'cache_custom', $wildcard = FALSE);
  cache_clear_all('rep_mail-' . $acct_id, 'cache_custom', $wildcard = FALSE);
}